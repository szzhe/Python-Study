
### 集合 ###

数学意义上的集合：没有重复元素

定义与初始化：
    s = set() # set是一个无序的集合
    s = {1,2,3}
    s = set(range(3))

增加
    >>> s = {0,1,2}
    >>> s.add(3)
    {0,1,2,3}
    >>> s.add(3)
    {0,1,2,3} # 添加的时候，判断存在相同元素时，去重(什么也不做)
    
    >>> s.update(range(8,10)) #update方法 原地修改，返回None
    >>> s
    {0,1,2,3,8,9}
    
    >>> s.update(10) # update方法是对可迭代对象进行操作
    TypeError:'int' object is not iterable

删除
    >>> s = {0,1,2,3,4,5,6,7,8,9}
    >>> s.remove(6)
    >>> s
    {0,1,2,3,4,5,7,8,9}
    >>> s.remove(6) # remove方法删除一个set中的元素，若元素不存在，则抛出KeyError
    KeyError:6
    
    >>> s.pop() # set是一个无序的集合，pop()不能指定索引，随机删除一个元素并返回
    0
    >>> s
    {1,2,3,4,5,7,8,9}
    
    >>> s.clear()
    >>> s
    set()
    >>> s.pop() # pop() 集合为空抛出key error
    KeyError: 'pop from an empty set'
    
    >>> s = {1}
    >>> s.discard(1)
    >>> s
    set()
    >>> s.discard(999) # 删除没有的元素什么也不做
    
    --- remove 删除给定的元素，元素不存在，抛出KeyError
    --- discard 删除给定的元素，元素不存在，什么也不做
    --- pop 随机删除一个元素并返回，集合为空，抛出KeyError
    --- clear 清空集合

修改
    集合不能修改单个元素，因为set()是无序的，没有下标。
    若想修改，需操作clear()后add()

查找
    集合不能通过索引访问，因为集合不是一个线性结构(无序)
    集合没有访问单个元素的方法(无序)
    集合不能查找单个元素
    集合不是线性结构，集合元素没有顺序

成员运算符
    in
    not in
    判断一个元素，是否在容器中(list,tuple,set,bytearray)
    返回bool值
    
    >>> b'b' in bytearray(b'abc') # 单个不能变化的叫bytes；把不能变化的bytes变成可变对象的叫bytearray
    True
    
    --- 集合的成员运算 和 其他线性结构的时间复杂度是不同的
    >>> lst = list(range(1000000))
    >>> s = set(range(1000000))
    
    >> %%timeit
    .. -1 in lst
    ..
    14.5 ms ± 455 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
    >> %%timeit
    .. -1 in lst
    ..
    52.4 ns ± 0.0708 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
    结论1:做成员运算的时候集合的效率远高于列表
    
    能够使用set做成员运算的时候，尽量使用集合，而不要使用list,tuple等
    
    --- 集合的效率 和 集合的规模无关，O(1)
    --- 列表的效率 和 列表的规模呈正比, O(n)
    
    > 个人经验：集合可以用于去重
    
    >>> html = set['\n','\n']
        for item in html:
            if item = '\n':
                print()
                
    
    'sha1:c3abbcf47b81:cc1b5faad8e9215ae0d4eda338eca165b03515e0'
    
### 集合运算

交集∩
    集合论中，设A，B两个集合，由所有属于集合A 且 属于集合B的元素所组成的集合，叫做集合A，叫做集合A 与集合B的交集(intersection)
    >>> s1 = {1,2,3}
    >>> s2 = {2,3,4}
    >>> s1.intersection(s2) #返回结果集，原地不做修改的函数，交集是有一个交换率的
    {2,3}
    >>> s1
    {1,2,3}
    
    >>> s1.intersection_update(s2) # 原地修改，并返回None
    >>> s1
    {2,3}
    >>> s2
    {2,3,4}
    
    >>> s1 & s2 # 交集运算重载符，原地不修改，效果=intersection
    {2,3}

差集
    集合A 和 集合B，当集合C的元素仅仅存在于A中，但不存在于B中，并且A中存在、B中不存在的元素，全部存在C中，那么C是A的差集
    >>> s1 = {1,2,3}
    >>> s2 = {2,3,4}
    >>> s1.difference(s2)
    {1}
    >>> s2.difference(s1)
    {4}
    
 ---差集 是不具备交换率的
 
    >>> s1.difference_update(s2)
    >>> s1
    {1}

    >>> s1 = {1,2,3}
    >>> s1 - s2  # -是差集的运算重载符
    {1}
    >>> s2 - s1
    {4}

对称差集
    集合A 与 集合B：一个元素，要么在集合A中，要么在集合B中
    >>> s1 = {1,2,3}
    >>> s2 = {2,3,4}
    >>> s1.symmetric_difference(s2)
    {1,4}
    >>> s2.symmetric_difference(s1)
    {1,4}
    
 --- 对称差集也是有交换率的
 
    >>> s1.symmetric_difference_update(s2)
    >>> s1
    {1,4}
    
    >>> s1 ^ s2  # ^是对称差集的运算重载符
    {1,4}
    
并集
    若A和B，则A和B并集是所有A的元素和所有B的元素，而没有其他元素的集合
    >>> s1.union(s2)
    {1,2,3,4}
    >>> s1
    {1,2,3}
    >>> s2
    {2,3,4}
    >>> s2.union(s1)
    {1,2,3,4}
    
 --- 并集也具有交换率
 
    >>> s1.update(s2)
    {1,2,3,4}
    >>> s2
    {2,3,4}
 
    >>> s1 | s2 # |是并集的运算重载符
    {1,2,3,4}
    
补集
    补集一般指绝对补集，设S是一个集合，A是S的一个子集，由S中所有不属于A的元素组成的集合 叫做子集A 在S中的绝对补集(简称补集或余集)
    在程序语言中，没有补集运算
    因为在程序中，无法定义出绝对全集，所以无法求出绝对补集

同或 和 异或的概念

### 集合相关的判断

    >>> s1 = {1,2,3,4}
    >>> s2 = {2,3}
    如果一个集合s2，每一个元素都在集合s1中 ，且集合s1可能包含s2中没有的元素，则集合s1就是s2的一个超集，s2就是s1的一个子集
    >>> s2.issubser(s1)
    True
    >>> s1.issubser(s2)
    False
    >>> s1.issuperser(s2)
    True
    >>> s2.issuperser(s1)
    False

    >>> def _issubser(s1,s2):
            for x in s1:
                if x not in s2:
                    return False
            return True

    >>> _issubser(s1,s2)
    False
    >>> _issubser(s2,s1)
    True
    
    >>> def _issubser(s1,s2):
            for x in s2:
                if x not in s1:
                    return False
            return True
            
    >>> _issubser(s1,s2)
    True
    
    >>> s3 = {1,2}
    >>> s4 = {3,4}
    >>> s3.isdisjoint(s4) 
    True
 --- # isdisjoint判断2个集合 是否有交集，如果有交集 返回False, 如有没有交集，返回True