
### 闭包概念

在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。
闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其持久性

白话：就是当某个函数被当成对象返回时，夹带了外部变量，就形成了一个闭包。

* 闭包(closure)是函数式编程的重要的语法结构。
* 闭包是一种引用了外部变量的函数对象，无论该变量所处的作用域是否还存在于内存中。
* 以某种逻辑方式组织代码，提高代码的可重复使用性(reusability)。

& Python一切皆对象，函数这一语法结构也是一个对象。在函数对象中，我们像使用一个普通对象一样使用函数对象，比如更改函数对象的名字，或者将函数对象作为参数进行传递

### 函数对象的作用域

函数对象也有其存活的范围，也就是函数对象的作用域。函数对象是使用def语句定义的，函数对象的作用域与def所在的层级相同。
在line_conf函数的隶属范围内定义的函数line，就只能在line_conf的隶属范围内调用。

def line_conf():
    def line(x):
        return 2*x+1
    print(line(5))   # within the scope

line_conf()
print(line(5))       # out of the scope

同理：如果使用lambda定义函数，那么函数对象的作用域与lambda所在的层级相同

### 闭包

函数是一个对象，所以可以作为某个函数的返回结果

def line_conf():
    def line(x):
        return 2*x+1
    return line       # return a function object

my_line = line_conf()
print(my_line(5)) 

******************************************************************************************************************

def line_conf():
    b = 15
    def line(x):
        return 2*x+b
    return line       # return a function object

b = 5
my_line = line_conf()
print(my_line(5))

line定义的隶属程序块中引用了高层级的变量b，但b信息存在于line的定义之外(b的定义并不在line的隶属程序块中)。
我们称b为line的环境变量(或非本地变量nonlocal variable)。事实上，line作为line_conf的返回值时，line中已经包括b的取值(尽管b并不隶属于line).

******************************************************************************************************************

《分解说明》

一个函数和它的环境变量合在一起，就构成了一个闭包(closure)。在Python中，所谓的闭包是一个包含有环境变量取值的函数对象。
环境变量取值被保存在函数对象的__closure__属性中，这个元组中的每个元素是cell类型的对象

def generate_power_func(n):
    print("id(n): %X" % (id(n)))  # %X 无符号十六进制
    def nth_power(x):
        return x**n
    print("id(nth_power): %X" % id(nth_power))
    return nth_power

kk = generate_power_func(4)  # 调用函数，会生成一个nth_power函数对象；最后将结果-nth_power函数对象()返回给变量kk
'''
id(n): 664DB4A0
id(nth_power): 266A9BCB9D8
'''
del generate_power_func  # 将函数 generate_power_func 函数从全局命名空间删除
print(kk(2))  # 调用闭包函数 kk = 16

print(kk.__closure__)
# 对象返回一个由 cell 对象组成的元组，cell 对象记录了定义在外围作用域的变量信息
# (<cell at 0x000001D34C1D5708: int object at 0x00000000664DB4A0>,)
# 对于那些不是闭包的函数对象来说，__closure__ 属性值为 None

print(kk.__closure__[0].cell_contents) # cell_contents属性，保存了闭合数值，此处为4

'''结论：函数对象nth_power是由generate_power_func产生的一个闭包，闭包会保留来自外围作用域变量的信息。'''

******************************************************************************************************************
练习1：
def line_conf(a, b):
    i = a * b
    def line(x):
        nonlocal i # 默认情况下，非本地变量是只读的。为了可以修改非本地变量，需要将它们生命为nonlocal，
        i = i + x
        return i * x + b
    return line

line1 = line_conf(4, 5)
print(line1(5))

******************************************************************************************************************
练习2：
