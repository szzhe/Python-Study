
1.当函数作为返回值的时候，就称为高阶函数

2.当函数作为参数传递

def sort(it, r=False):
    ret = []
    for x in it:
        for i, e in enumerate(ret):
            if r:
                if x < e:
                    ret.insert(i, x)
                    break
            else:
                if x > e:
                    ret.insert(i, x)
                    break
        else:
            ret.append(x)
    return ret

lst = [1, 4, 7, 2, 3, 10, 8]
ret = sort(lst,r=True)  # 升序
# ret = sort(lst) # 降序
print(ret)

>>> 转换

def sort(it, cmp=lambda a, b: a < b):
    ret = []

    for x in it:
        for i, e in enumerate(ret):
            if cmp(x, e):
                ret.insert(i, x)
                break
        else:
            ret.append(x)
    return ret

lst = [1, 4, 7, 2, 3, 10, 8]
# ret = sort(lst)  # 升序
ret = sort(lst,cmp=lambda a, b: a > b)  # 降序
print(ret)

### 装饰器，简化版

import datetime
import time

def logger(fn):
    def wrap(x, y):
        start = datetime.datetime.now()
        ret = fn(x, y)
        end = datetime.datetime.now()
        print("{} called took {}".format(fn.__name__, end - start))
        return ret
    return wrap

@logger # f = logger(add)
def add(x, y):
    return x + y

print(add(1, 3))
---
add called took 0:00:00
4

### 装饰器，稍高级版

import datetime
import time

def logger(fn):
    def wrap(*args, **kwargs):
        start = datetime.datetime.now()
        ret = fn(*args, **kwargs)
        end = datetime.datetime.now()
        print("{} called took {}".format(fn.__name__, end - start))
        return ret
    return wrap

@logger # logger_add = logger(sleep)
def sleep(x):
    time.sleep(x)

print(sleep(3))
---
sleep called took 0:00:03.000977
None

