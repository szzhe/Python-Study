
### 解构和封装

解构：按照元素顺序，把线性解构的元素，赋值给变量

>>> x = 1
>>> y = 2
>>> x, y = y, x #左边(x,y)解构，右边(y,x)封装
>>> print(x, y)
2 1

封装：定义一个元组，可以省略小括号，封装出来的一定是元组

>>> t = 1, 2
>>> t
(1, 2)
>>>type(t)
tuple

*** python3中的解构变化 *** head|mid|tail

>>> lst = list(range(1000))
>>> head, *mid, tail = lst
0
[1,2,3,...,998]
999

>>> *mid
can't use starred expression here # 不能使用*星号表达式

>>> head, *tail = lst
0
[1,2,3,...,999]

>>> lst = [0,1,2,3,4]
>>> *head, tail = lst # *head代表除了最后一个元素外的所有元素
>>> head
[0,1,2,3]

>>> *lst2 = lst # 不能单一的使用星号作为变量接收，如果可以，相当于lst[0:0]
SyntaxError: starred assignment target must be in a list or tuple

>>> head, *m1, *m2, tail = lst # 同一个解构中，只能使用一个星号
SyntaxError: two starred expressions in assignment

>>> first, second, *others, last = lst
0 1 [2,3] 4

>>> v1, v2, v3, v4, v5, v6, v7 = lst # 当左边变量超过右边元素个数的时候，是不允许的
ValueError: not enough values to unpack (expected 7, got 5)

>>> v1, v2 = lst # 数量不匹配
ValueError: too many values to unpack (expected 2)

>>> v1, v2, v3, *v4, v5, v6 = lst # *星号可以为空值
>>> *v4
[]
>>> lst = [1, 2]
>>> head, *mid, tail = lst
>>> mid
[]

--- 元素按照顺序赋值给变量
--- 变量个数和元素个数必须匹配
--- 加星号变量，可以接受任意个数的元素
--- 加星号的变量不能单独出现

>>> f, *t = (1,2,3,4)  # 无论右边元素是什么类型的，左边的星号变量都是列表
>>> t
[2,3,4]

>>> lst = [0, 1, 2, 3]
>>> head, *_, tail = lst # 在python中，使用下划线_的方式，来丢弃该变量
>>> print(head, _, tail)
0 [1,2] 3

>>> l = ['a','b']
>>>for _, item in enumerate(l):
        print(item)
a
b

单个下划线是python的合法标识符，但是如果不是要丢弃一个变量，通常不要用单个下划线表示一个有意义的变量

#如何取出索引1,3，和倒数第二个元素
lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]
_, v1, _, v2, *_, last, _ = lst
print(v1)

>>> lst = [1,(2,3),5]
>>> _, v, *_, = lst
>>> v
(2,3)
>>> _, (_, val), *_ = lst # 解构是支持多层次的
>>> val
3
>>> _, (*_, tail), *_ = lst
>>> tail
3
>>> _, [*_, tail], *_ = lst
>>> tail
3
>>> _, _, tail, *_ = lst
>>> tail
5

>>> 'env=/usr/local/bin'.partition('=')
('env', '=', '/usr/local/bin')
>>> key, _, value = 'env=/usr/local/bin'.partition('=')
>>> key
'env'
>>> value
'/usr/local/bin'
