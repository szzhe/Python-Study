
### 内建函数filter()、map()、reduce()

1）filter()函数
语法：filter(function, sequence)
调用一个布尔函数func来迭代遍历每个seq中的元素；返回一个使func返回值为true的元素的序列。
白话文：给定一个对象的序列和一个"过滤"函数，每个序列元素都通过这个过滤器进行筛选，保留函数返回为真的对象。filter函数为已知的序列的每个元素调用
给定布尔函数，每个filter返回的非零(true)值元素添加到一个元素中。

def filter(bool_func,seq):
    filter_sql = []
    for eachIterm in seq:
        if bool_func(eachIterm):
            filter_sql.append(eachIterm)
    return filter_sql

f4 = lambda x : x % 2 != 0
l = range(1, 10)
tt = list(filter(f4,l))
print(tt) ---> [1, 3, 5, 7, 9]

题目一：利用filter()过滤掉None或者空字符串

# 在Python中，None、空列表[]、空字典{}、空元组()、0等一系列代表空和无的对象会被转换成False
# str.strip() 默认删除空白符（包括'\n', '\r',  '\t',  ' ')
# 表示只有当x为真，并且x去掉首位空格后长度大于零（帮助排除s是''的情况），才返回True，否则返回False

def is_not_empty(s):
    return s and len(s.strip()) > 0
uu = filter(is_not_empty, ['test', None, '', 'str', '  ', 'END'])
print(uu) --- > ['test', 'str', 'END']

转换：

f5 = lambda x : x and len(x.strip()) > 0 
l =  ['test', None, '', 'str', '  ', 'END']
iop = list(filter(f5, l))
print(iop) --- > ['test', 'str', 'END']

题目二：

from random import randint
def fn(n):
    return n % 2
allNums = []
for eachNum in range(9):
    allNums.append(randint(1,99))
dkd = list(filter(fn,allNums))
print(dkd)

def转换lambda：

from random import randint

allNums = []
for eachNum in range(9):
    allNums.append(randint(1,99))
dkd = list(filter(lambda x : x % 2,allNums))
print(dkd)

lambda转换list解析：

from random import randint

allNums = []
for eachNum in range(9):
    allNums.append(randint(1,99))
print([n for n in allNums if n % 2])

多个list解析转换：

from random import randint as ri

print([n for n in [ri(1, 99) for i in range(9)] if n % 2])

*********************************************************************************************************************************************

补充学习？

形象地解释Python中的列表解析 
http://python.jobbole.com/83884/

1.什么是列表推导？
2.从循环到列表推导
numbers = [1, 2, 3, 4, 5]
doubled_odds = [n * 2 for n in numbers if n % 2 == 1]
3.无条件列表推导
doubled_numbers = [n * 2 for n in numbers]
4.嵌套循环
flattened = [n for row in matrix for n in row]
5.集合推导
first_letters = {w[0] for w in words} # set.add()
6.字典推导
flipped = {value: key for key, value in original.items()}

*********************************************************************************************************************************************

2）Map函数：
语法：map(func, seq[,seq2...])
将函数func作用于给定序列(s)的每个元素，并用一个列表来提供返回值；如果func为None，func表现为一个身份函数，返回一个含有每个序列中元素集合的n个元组的列表。
白话文：map()是Python内置的高阶函数，它接收一个函数f和一个list，并通过把函数f依次作用在list的每个元素上，得到一个新的list并返回。

def map(func,seq):
    mapped_seq = []
    for eachIterm in seq:
        mapped_seq.append(func(eachIterm))
    return mapped_seq

g = lambda x: x ** 2
s = [1,2,3,4,5,6,7,8,9]
ss =list(map(g,s))
print(ss)

题目：
# 输入：['adam', 'LISA', 'barT']
# 输出：['Adam', 'Lisa', 'Bart']

解题思路一：
lst = ['adam', 'LISA', 'barT']
gg = list(map(lambda k: k.title(),lst))
print(gg)

解题思路二：
def fn(lst):
    lst1 = lst[0:1].upper()+lst[1:].lower()
    return lst1
hh = list(map(fn,['adam', 'LISA', 'barT']))
print(hh)

'''多个序列作为其输入，map()会并行的迭代每个序列。在第一次调用时，map()会将每个序列的第一个元素捆绑到一个元组中，将func函数作用到map()上，当map()已经
完成执行的时候，将元组的结果返回到mapped_seq映射的，最终以整体返回的序列中'''

>>> kk = list(map(lambda x, y: x + y, [1, 3, 5], [2, 4, 6]))
>>> print(kk) ---> [3, 7, 11]

>>> kk = list(map(lambda x, y: (x + y, x - y), [1, 3, 5], [2, 4, 6]))
>>> print(kk) ---> [(3, -1), (7, -1), (11, -1)]

>>> kk = list(map(None, [1, 3, 5], [2, 4, 6])) # 当函数为None时，操作和zip相似.且zip()开始取代这个了，目的是将多个列表相同位置的元素归并到一个元组
>>> print(kk) ---> [(1,2),(3,4),(5,6)]

*** 使用map()函数可以实现将其他类型的数转换成list ***

# 将元组转换成str，并将结果存放在一个list中
k1 = list(map(str, (1, 2, 3)))
print(k1) ---> ['1', '2', '3']
# 将元组转换成int，并将结果存放在一个list中
k2 = list(map(int, (1, 2, 3)))
print(k2) ---> [1, 2, 3]

# 将字符串转换成int，并将结果存放在一个list中
k3 = list(map(int, '1234'))
print(k3) ---> [1, 2, 3, 4]
# 将字符串转换成tuple，并将结果存放在一个list中
k4 = list(map(tuple, '1234'))
print(k4) ---> [('1',), ('2',), ('3',), ('4',)]

# 提取字典的key，转换成int，并将结果存放在一个list中
k5 = list(map(int, {1: 2, 2: 3, 3: 4}))
print(k5) ---> [1, 2, 3]
# 提取字典的key，转换成str，并将结果存放在一个list中
k6 = list(map(str, {1: 4, 2: 5, 3: 6}))
print(k6) ---> ['1', '2', '3']

*********************************************************************************************************************************************

3）reduce()函数

语法：reduce(function, sequence, startValue)
二元函数[一个接受带两个值作为输入，进行了一些计算然后返回一个值作为输出]，一个序列，和一个可选的初始化器。

将二元函数作用于seq序列的元素，每次携带一对(先前的结果以及下一个序列元素)，连续地将现有的结果和下一个值作用在获得的随后的结果上，最后减少我们的序列为
一个单一的返回值；如果初始值init给定，第一个比较会是init和第一个序列元素而不是序列的头两个元素。

白话文：reduce()函数也是Python内置的一个高阶函数。reduce()函数接收的参数和map()类似，一个函数f，一个list。但行为和map()不同，reduce()传入的函数f必须
接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值。

def reduce(bin_func,seq,init=None):
    lseq = list(seq)
    if init is None:
        res = lseq.pop(0)
    else:
        res = init
    for items in lseq:
        res = bin_func(res.items)
    return res

注意：Python3.6中，reduce()已经取消，如想使用，需用fuctools.reduce来调用

import functools

f2 = lambda x, y:  x + y
l = range(1, 101)
kk = functools.reduce(f2, l)
print(kk) ---> 5050
>>>
kk = functools.reduce(f2, l, 100) # reduce()还可以接收第3个可选参数，作为计算的初始值。100,1,2,3,...,101
print(kk) --- 5150

*********************************************************************************************************************************************

通过此例子发现，lambda的使用大量简化了代码，使代码简练清晰。但是值得注意的是，这会在一定程度上降低代码的可读性。如果不是非常熟悉python的人或许会对此
感到不可理解。

小结：
lambda 定义了一个匿名函数
lambda 并不会带来程序运行效率的提高，只会使代码更简洁。
如果可以使用for...in...if来完成的，坚决不用lambda。
如果使用lambda，lambda内不要包含循环，如果有，我宁愿定义函数来完成，使代码获得可重用性和更好的可读性。

总结：lambda 是为了减少单行函数的定义而存在的。






